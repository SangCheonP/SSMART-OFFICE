# Nginx 이벤트 처리 설정 (별도 설정이 없으므로 기본값 사용)
events { }

# HTTP 블록 - 주로 웹 서버 설정이 포함됨
http {
    # 클라이언트와 서버 간의 연결 유지 시간 설정 (기본 75초, 여기서는 600초로 설정)
    keepalive_timeout 600s;

    # 클라이언트가 요청 본문을 보내는 데 허용되는 시간 (600초)
    client_body_timeout 600s;

    # 클라이언트가 요청 헤더를 보내는 데 허용되는 시간 (600초)
    client_header_timeout 600s;

    # 서버가 클라이언트로 응답을 보내는 시간 (600초)
    send_timeout 600s;

    # React 서버에 대한 upstream 설정
    upstream react {
        server react-container:80;
    }

	# api-gateway
	upstream api-gateway {
		server api-gateway-container:8080;
	}

    # CORS 설정을 위한 HTTP Origin 매핑 (도메인 및 로컬호스트 허용)
    map $http_origin $cors_origin {
        default "";
        "~^https?://(k11b202\\.p\\.ssafy\\.io|localhost:3000)$" $http_origin;
    }

    # 허용된 HTTP 메서드를 설정하는 매핑 (기본으로 모든 주요 메서드 허용)
    map $request_method $cors_methods {
        default "GET, POST, PUT, DELETE, OPTIONS";
    }

    # WebSocket 연결을 위해 HTTP 업그레이드 헤더 처리
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # HTTPS 설정
    server {
        listen 443 ssl;
        server_name k11b202.p.ssafy.io;

        # SSL 인증서 경로 설정
        ssl_certificate /etc/letsencrypt/live/k11b202.p.ssafy.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/k11b202.p.ssafy.io/privkey.pem;

        # 허용된 SSL 프로토콜 설정
        ssl_protocols TLSv1.2 TLSv1.3;

        # React 애플리케이션에 대한 프록시 설정
        location / {
            proxy_pass http://react;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;

            # CORS 헤더 추가
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' $cors_methods always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Accept, Content-Type, Authorization, X-Requested-With';
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            # SSE(Server-Sent Events) 설정 (buffering 해제)
            proxy_buffering off;
            proxy_http_version 1.1;
        }

        # Spring 관련 API 프록시 설정
        location /api {
            # OPTIONS 메서드 처리 (CORS 설정 포함)
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $cors_origin always;
                add_header 'Access-Control-Allow-Methods' $cors_methods always;
                add_header 'Access-Control-Allow-Headers' 'Origin, Accept, Content-Type, Authorization, X-Requested-With';
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;  # No Content 응답 반환
            }

            # 실제 API 요청 처리
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' $cors_methods always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Accept, Content-Type, Authorization, X-Requested-With';
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            proxy_pass http://api-gateway;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header Origin http://localhost:3000;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # SSE 설정 (buffering 해제)
            proxy_buffering off;
            proxy_http_version 1.1;
        }

        # /gpu 경로에 대한 프록시 설정 (외부 IP로 프록시 처리)
        location /gpu {
            proxy_pass http://70.12.130.111:33333;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # OPTIONS 메서드 처리 (CORS 설정 포함)
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $cors_origin always;
                add_header 'Access-Control-Allow-Methods' $cors_methods always;
                add_header 'Access-Control-Allow-Headers' 'Origin, Accept, Content-Type, Authorization, X-Requested-With';
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;  # No Content 응답 반환
            }

            # 실제 API 요청 처리
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' $cors_methods always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Accept, Content-Type, Authorization, X-Requested-With';
            add_header 'Access-Control-Allow-Credentials' 'true' always;
        }
    }

    # HTTP 서버 설정 - SSL 인증서 발급 및 HTTP 요청 리다이렉션
    server {
        listen 80;
        server_name k11b202.p.ssafy.io;

        # 인증서 발급을 위한 경로 설정 (Let’s Encrypt 사용)
        location /.well-known/acme-challenge/ {
            allow all;
            root /var/www/certbot;
        }

        # HTTP 요청을 HTTPS로 리다이렉트
        location / {
            return 308 https://$host$request_uri;
        }
    }
}

